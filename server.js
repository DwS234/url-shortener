 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongoose = require('mongoose');
var Schema = mongoose.Schema;

var basePageUrl = "https://url-shortener15.glitch.me/";

var dbUrl = process.env.MLAB_URI;
mongoose.connect(dbUrl, function(err){
  if(err){
   console.log("Error" + err);
    return;
  } else {
   console.log("Connection with database established"); 
  }
});

var urlSchema = new Schema({
 originalUrl: String,
  shortenedUrl: String,
  value: Number
});

var URL = mongoose.model("URL", urlSchema);


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    });

// Respond not found to all the wrong routes

app.get("/create", function(req, res){
  var link = req.query.link;
  res.setHeader("Content-Type", "application/json");
  if(link){
    var counter;
  URL.findOne({myId: "counter"}, function(err, count){
    if(err)  
      console.log("Couldn't find counter: " + err);
    else
      counter = count.get("value");
  });
  
  URL.findOne({originalUrl: link}, function(err, url){
    if(err)
      console.log("Error: " + err);
    else {
      
     if(!url)
     {
       
      URL.create({originalUrl: link, shortenedUrl: basePageUrl + counter}, function(err, url){
        if(err)
         console.log("Couldn't create a new url document: " + err);
        else 
        {
          counter++;
          console.log(counter);
          res.send(JSON.stringify({originalUrl: url.originalUrl, shortenedUrl: url.shortenedUrl}, null, 3));
      
          URL.findOneAndUpdate({myId: "counter"}, {value: counter}, {new: true}, function(err, count){
           if(err)
             console.log("Couldn't update counter value: " + err);
             
          });
        }    
      }); 
     }
      else 
        res.send(JSON.stringify({originalUrl: url.originalUrl, shortenedUrl: url.shortenedUrl}, null, 3));
    }
  });
  } else {
    
   res.send(JSON.stringify({error: "Wrong query parameter name. It should be link."} , null, 4)); 
  }
});

app.get("/get", function(req, res){
    var link = req.query.link;
    res.setHeader('Content-Type', 'application/json');
   if(link)
   {
    URL.findOne({originalUrl: link}, function(err, url){
       if(err)
         res.send("Something went wrong: " + err);
      else {
        if(url)
         res.send(JSON.stringify({originalUrl: url.originalUrl, shortenedUrl: url.shortenedUrl}, null, 3)); 
        else 
          res.send(JSON.stringify({error: "The url you entered is not in the database"} , null, 4));
      }
    });
   } else {
     res.send(JSON.stringify({error: "Wrong query parameter name. It should be link."} , null, 4));
   }
  
   
});

app.get("/:pageId", function(req, res){
  var pageId = req.params.pageId;
  var isLink = req.query.link;
  if(isLink)
    res.send("Such a page doesn't exist");
    
  URL.findOne({shortenedUrl: basePageUrl + pageId}, function(err, url){
     if(err)
       res.send("Something went wrong: " + err);
    else
    {
      if(url)
        res.redirect(url.originalUrl);
      else
      {
       res.setHeader("Content-Type", "application/json");
        res.send(JSON.stringify({error: "The url you entered is not in the database"} , null, 4));
      }
    }
      
  });
});


// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

